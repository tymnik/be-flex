{"version":3,"file":"vendor-a2152ea4.js","sources":["../../node_modules/intl-tel-input/build/js/intlTelInput.js","../../node_modules/intl-tel-input/index.js"],"sourcesContent":["/*\n * International Telephone Input v18.2.1\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"North Macedonia (Северна Македонија)\", \"mk\", \"389\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _objectSpread(target) {\n            for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i] != null ? Object(arguments[i]) : {};\n                var ownKeys = Object.keys(source);\n                if (typeof Object.getOwnPropertySymbols === \"function\") {\n                    ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                    }));\n                }\n                ownKeys.forEach(function(key) {\n                    _defineProperty(target, key, source[key]);\n                });\n            }\n            return target;\n        }\n        function _defineProperty(obj, key, value) {\n            key = _toPropertyKey(key);\n            if (key in obj) {\n                Object.defineProperty(obj, key, {\n                    value: value,\n                    enumerable: true,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                obj[key] = value;\n            }\n            return obj;\n        }\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n                writable: false\n            });\n            return Constructor;\n        }\n        function _toPropertyKey(arg) {\n            var key = _toPrimitive(arg, \"string\");\n            return typeof key === \"symbol\" ? key : String(key);\n        }\n        function _toPrimitive(input, hint) {\n            if (typeof input !== \"object\" || input === null) return input;\n            var prim = input[Symbol.toPrimitive];\n            if (prim !== undefined) {\n                var res = prim.call(input, hint || \"default\");\n                if (typeof res !== \"object\") return res;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (hint === \"string\" ? String : Number)(input);\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") {\n            window.intlTelInputGlobals = intlTelInputGlobals;\n        }\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // auto insert dial code (A) on init, (B) on user selecting a country, (C) on calling setCountry\n            // also listen for blur/submit and auto remove dial code if that's all there is\n            autoInsertDialCode: false,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // national vs international formatting for numbers e.g. placeholders and displaying existing numbers\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag\n            separateDialCode: false,\n            // option to hide the flags - must be used with separateDialCode, or allowDropdown=false\n            showFlags: true,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/ function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, do not insert dial codes\n                    if (this.options.nationalMode) {\n                        this.options.autoInsertDialCode = false;\n                    }\n                    // if separateDialCode enabled, do not insert dial codes\n                    if (this.options.separateDialCode) {\n                        this.options.autoInsertDialCode = false;\n                    }\n                    // force showFlags=true if there's a dropdown and we're not displaying the dial code,\n                    // as otherwise you just have a down arrow on it's own which doesn't make sense\n                    var forceShowFlags = this.options.allowDropdown && !this.options.separateDialCode;\n                    if (!this.options.showFlags && forceShowFlags) {\n                        this.options.showFlags = true;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) {\n                            this.options.dropdownContainer = document.body;\n                        }\n                    }\n                    // check if input has one parent with RTL\n                    this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoInsertDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) {\n                        this._translateCountriesByLocale();\n                    }\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) {\n                            return;\n                        }\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    if (a.name < b.name) {\n                        return -1;\n                    }\n                    if (a.name > b.name) {\n                        return 1;\n                    }\n                    return 0;\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) {\n                            this.dialCodes[c.dialCode] = true;\n                        }\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) {\n                            this.preferredCountries.push(countryData);\n                        }\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) {\n                        forEachProp(attrs, function(key, value) {\n                            return el.setAttribute(key, value);\n                        });\n                    }\n                    if (container) {\n                        container.appendChild(el);\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    var _this$options = this.options, allowDropdown = _this$options.allowDropdown, separateDialCode = _this$options.separateDialCode, showFlags = _this$options.showFlags, customContainer = _this$options.customContainer, hiddenInput = _this$options.hiddenInput, dropdownContainer = _this$options.dropdownContainer;\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (allowDropdown) {\n                        parentClass += \" iti--allow-dropdown\";\n                    }\n                    if (separateDialCode) {\n                        parentClass += \" iti--separate-dial-code\";\n                    }\n                    if (showFlags) {\n                        parentClass += \" iti--show-flags\";\n                    }\n                    if (customContainer) {\n                        parentClass += \" \".concat(customContainer);\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    // only hide the flagsContainer if allowDropdown, showFlags and separateDialCode are all false\n                    var showFlagsContainer = allowDropdown || showFlags || separateDialCode;\n                    if (showFlagsContainer) {\n                        this.flagsContainer = this._createEl(\"div\", {\n                            \"class\": \"iti__flag-container\"\n                        }, wrapper);\n                    }\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    // using Aria tags for \"Select-Only Combobox Example\"\n                    // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/\n                    if (showFlagsContainer) {\n                        this.selectedFlag = this._createEl(\"div\", _objectSpread({\n                            \"class\": \"iti__selected-flag\"\n                        }, allowDropdown && {\n                            role: \"combobox\",\n                            \"aria-haspopup\": \"listbox\",\n                            \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                            \"aria-expanded\": \"false\",\n                            \"aria-label\": \"Telephone country code\"\n                        }), this.flagsContainer);\n                    }\n                    if (showFlags) {\n                        this.selectedFlagInner = this._createEl(\"div\", {\n                            \"class\": \"iti__flag\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.selectedFlag && this.telInput.disabled) {\n                        this.selectedFlag.setAttribute(\"aria-disabled\", \"true\");\n                    }\n                    if (separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (allowDropdown) {\n                        if (!this.telInput.disabled) {\n                            // make element focusable and tab navigable\n                            this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        }\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (hiddenInput) {\n                        var hiddenInputName = hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) {\n                                hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                            }\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        if (this.options.showFlags) {\n                            tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        }\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options2 = this.options, initialCountry = _this$options2.initialCountry, autoInsertDialCode = _this$options2.autoInsertDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and autoInsertDialCode then insert the dial code\n                        if (!val && autoInsertDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) {\n                        this._updateValFromNumber(val);\n                    }\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoInsertDialCode) {\n                        this._initBlurListeners();\n                    }\n                    if (this.options.allowDropdown) {\n                        this._initDropdownListeners();\n                    }\n                    if (this.hiddenInput) {\n                        this._initHiddenInputListener();\n                    }\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) {\n                        this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    }\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) {\n                            _this4.telInput.focus();\n                        } else {\n                            e.preventDefault();\n                        }\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) {\n                        label.addEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") {\n                            _this4._closeDropdown();\n                        }\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else {\n                        this.resolveUtilsScriptPromise();\n                    }\n                    if (this.options.initialCountry === \"auto\") {\n                        this._loadAutoCountry();\n                    } else {\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) {\n                        this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    }\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) {\n                        el.classList.add(className);\n                    } else if (!shouldHaveClass && el.classList.contains(className)) {\n                        el.classList.remove(className);\n                    }\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) {\n                            _this9._highlightListItem(listItem, false);\n                        }\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) {\n                            _this9._selectListItem(listItem);\n                        }\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) {\n                            _this9._closeDropdown();\n                        }\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") {\n                            _this9._handleUpDownKey(e.key);\n                        } else if (e.key === \"Enter\") {\n                            _this9._handleEnterKey();\n                        } else if (e.key === \"Escape\") {\n                            _this9._closeDropdown();\n                        } else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) {\n                                clearTimeout(queryTimer);\n                            }\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) {\n                        this._selectListItem(this.highlightedItem);\n                    }\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.separateDialCode;\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") {\n                            number = \"1\".concat(number);\n                        }\n                        number = \"+\".concat(number);\n                    }\n                    // if separateDialCode enabled, then consider the selected dial code to be part of the number\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) {\n                        prevItem.classList.remove(\"iti__highlight\");\n                    }\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    this.selectedFlag.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                    if (shouldFocus) {\n                        this.highlightedItem.focus();\n                    }\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var _this$options3 = this.options, allowDropdown = _this$options3.allowDropdown, separateDialCode = _this$options3.separateDialCode, showFlags = _this$options3.showFlags;\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    if (showFlags) {\n                        this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    }\n                    this._setSelectedCountryFlagTitleAttribute(countryCode, separateDialCode);\n                    if (separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        if (this.isRTL) {\n                            this.telInput.style.paddingRight = \"\".concat(selectedFlagWidth + 6, \"px\");\n                        } else {\n                            this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                        }\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_setSelectedCountryFlagTitleAttribute\",\n                value: function _setSelectedCountryFlagTitleAttribute(countryCode, separateDialCode) {\n                    if (!this.selectedFlag) {\n                        return;\n                    }\n                    var title;\n                    if (countryCode && !separateDialCode) {\n                        title = \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode);\n                    } else if (countryCode) {\n                        // For screen reader output, we don't want to include the dial code in the reader output twice\n                        // so just use the selected country name here:\n                        title = this.selectedCountryData.name;\n                    } else {\n                        title = \"Unknown\";\n                    }\n                    this.selectedFlag.setAttribute(\"title\", title);\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with auto inserting dial code),\n                    // who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    this.selectedFlag.removeAttribute(\"aria-activedescendant\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) {\n                            window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                        if (this.dropdown.parentNode) {\n                            this.dropdown.parentNode.removeChild(this.dropdown);\n                        }\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) {\n                            newScrollTop -= middleOffset;\n                        }\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) {\n                            newScrollTop += middleOffset;\n                        }\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                        this.telInput.value = newNumber;\n                    } else if (this.options.autoInsertDialCode) {\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else {\n                            newNumber = newDialCode;\n                        }\n                        this.telInput.value = newNumber;\n                    }\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) {\n                            label.removeEventListener(\"click\", this._handleLabelClick);\n                        }\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) {\n                        form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    }\n                    // unbind autoInsertDialCode listeners\n                    if (this.options.autoInsertDialCode) {\n                        if (form) {\n                            form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        }\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n                }\n            }, {\n                key: \"isPossibleNumber\",\n                value: function isPossibleNumber() {\n                    var val = this._getFullNumber().trim();\n                    return window.intlTelInputUtils ? intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (this.selectedCountryData.iso2 !== countryCode) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) {\n                    handleSuccess();\n                }\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) {\n                    handleFailure();\n                }\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"18.2.1\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});","/**\n * Exposing intl-tel-input as a component\n */\nmodule.exports = require(\"./build/js/intlTelInput\");\n"],"names":["factory","module","undefined","allCountries","i","c","_objectSpread","target","source","ownKeys","sym","key","_defineProperty","obj","value","_toPropertyKey","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","_toPrimitive","input","hint","prim","res","intlTelInputGlobals","id","defaults","regionlessNanpNumbers","forEachProp","callback","keys","forEachInstance","method","Iti","options","_this","customOptions","_this2","forceShowFlags","autoCountryPromise","resolve","reject","utilsScriptPromise","iso2","countryCode","priority","index","lowerCaseOnlyCountries","country","lowerCaseExcludeCountries","iso","a","b","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","countryData","name","attrs","container","el","_this$options","allowDropdown","separateDialCode","showFlags","customContainer","hiddenInput","dropdownContainer","parentClass","wrapper","showFlagsContainer","hiddenInputName","countries","className","preferred","tmp","idSuffix","attributeValue","inputValue","useAttribute","val","dialCode","isRegionlessNanp","_this$options2","initialCountry","autoInsertDialCode","_this3","_this4","e","label","isDropdownHidden","_this5","_this6","number","max","_this7","numeric","s","shouldHaveClass","_this8","pos","windowTop","inputTop","dropdownHeight","dropdownFitsBelow","dropdownFitsAbove","extraTop","_this9","listItem","isOpening","query","queryTimer","next","originalNumber","useNational","_intlTelInputUtils$nu","NATIONAL","INTERNATIONAL","format","selectedDialCode","isNanp","countryCodes","alreadySelected","isRegionlessNanpNumber","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","countryList","_this$options3","prevCountry","selectedFlagWidth","nextItem","title","containerClone","flagsContainerClone","selectedFlagClone","width","shouldSetPlaceholder","numberType","placeholder","flagChanged","len","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","inputVal","newDialCode","newNumber","prevDialCode","includeAreaCode","numericChars","prefix","numericVal","start","form","originalCountryCode","type","injectScript","path","handleSuccess","handleFailure","script","iti","require$$0"],"mappings":"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"}